# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.master_account_base import MasterAccountBase  # noqa: F401,E501
from swagger_server.models.subsidy_base import SubsidyBase  # noqa: F401,E501
from swagger_server import util


class Payment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, amount: float=None, comment: str=None, _from: MasterAccountBase=None, to: SubsidyBase=None):  # noqa: E501
        """Payment - a model defined in Swagger

        :param name: The name of this Payment.  # noqa: E501
        :type name: str
        :param amount: The amount of this Payment.  # noqa: E501
        :type amount: float
        :param comment: The comment of this Payment.  # noqa: E501
        :type comment: str
        :param _from: The _from of this Payment.  # noqa: E501
        :type _from: MasterAccountBase
        :param to: The to of this Payment.  # noqa: E501
        :type to: SubsidyBase
        """
        self.swagger_types = {
            'name': str,
            'amount': float,
            'comment': str,
            '_from': MasterAccountBase,
            'to': SubsidyBase
        }

        self.attribute_map = {
            'name': 'name',
            'amount': 'amount',
            'comment': 'comment',
            '_from': 'from',
            'to': 'to'
        }

        self._name = name
        self._amount = amount
        self._comment = comment
        self.__from = _from
        self._to = to

    @classmethod
    def from_dict(cls, dikt) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The payment of this Payment.  # noqa: E501
        :rtype: Payment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Payment.


        :return: The name of this Payment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Payment.


        :param name: The name of this Payment.
        :type name: str
        """

        self._name = name

    @property
    def amount(self) -> float:
        """Gets the amount of this Payment.


        :return: The amount of this Payment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this Payment.


        :param amount: The amount of this Payment.
        :type amount: float
        """
        if amount is not None and amount > 500:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value less than or equal to `500`")  # noqa: E501
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def comment(self) -> str:
        """Gets the comment of this Payment.


        :return: The comment of this Payment.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Payment.


        :param comment: The comment of this Payment.
        :type comment: str
        """

        self._comment = comment

    @property
    def _from(self) -> MasterAccountBase:
        """Gets the _from of this Payment.


        :return: The _from of this Payment.
        :rtype: MasterAccountBase
        """
        return self.__from

    @_from.setter
    def _from(self, _from: MasterAccountBase):
        """Sets the _from of this Payment.


        :param _from: The _from of this Payment.
        :type _from: MasterAccountBase
        """

        self.__from = _from

    @property
    def to(self) -> SubsidyBase:
        """Gets the to of this Payment.


        :return: The to of this Payment.
        :rtype: SubsidyBase
        """
        return self._to

    @to.setter
    def to(self, to: SubsidyBase):
        """Sets the to of this Payment.


        :param to: The to of this Payment.
        :type to: SubsidyBase
        """

        self._to = to
