# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, username: str=None, password: str=None, is_admin: bool=None, real_name: str=None, email: str=None, phone_number: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param is_admin: The is_admin of this User.  # noqa: E501
        :type is_admin: bool
        :param real_name: The real_name of this User.  # noqa: E501
        :type real_name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param phone_number: The phone_number of this User.  # noqa: E501
        :type phone_number: str
        """
        self.swagger_types = {
            'id': str,
            'username': str,
            'password': str,
            'is_admin': bool,
            'real_name': str,
            'email': str,
            'phone_number': str
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'password': 'password',
            'is_admin': 'is_admin',
            'real_name': 'real_name',
            'email': 'email',
            'phone_number': 'phone_number'
        }

        self._id = id
        self._username = username
        self._password = password
        self._is_admin = is_admin
        self._real_name = real_name
        self._email = email
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def is_admin(self) -> bool:
        """Gets the is_admin of this User.


        :return: The is_admin of this User.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin: bool):
        """Sets the is_admin of this User.


        :param is_admin: The is_admin of this User.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def real_name(self) -> str:
        """Gets the real_name of this User.


        :return: The real_name of this User.
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name: str):
        """Sets the real_name of this User.


        :param real_name: The real_name of this User.
        :type real_name: str
        """

        self._real_name = real_name

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this User.


        :return: The phone_number of this User.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this User.


        :param phone_number: The phone_number of this User.
        :type phone_number: str
        """

        self._phone_number = phone_number
