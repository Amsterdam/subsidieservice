# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_base import AccountBase  # noqa: F401,E501
from swagger_server.models.transaction import Transaction  # noqa: F401,E501
from swagger_server import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, account_type: str=None, iban: str=None, balance: float=None, transactions: List[Transaction]=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param name: The name of this Account.  # noqa: E501
        :type name: str
        :param account_type: The account_type of this Account.  # noqa: E501
        :type account_type: str
        :param iban: The iban of this Account.  # noqa: E501
        :type iban: str
        :param balance: The balance of this Account.  # noqa: E501
        :type balance: float
        :param transactions: The transactions of this Account.  # noqa: E501
        :type transactions: List[Transaction]
        """
        self.swagger_types = {
            'name': str,
            'account_type': str,
            'iban': str,
            'balance': float,
            'transactions': List[Transaction]
        }

        self.attribute_map = {
            'name': 'name',
            'account_type': 'account_type',
            'iban': 'iban',
            'balance': 'balance',
            'transactions': 'transactions'
        }

        self._name = name
        self._account_type = account_type
        self._iban = iban
        self._balance = balance
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Account.


        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Account.


        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def account_type(self) -> str:
        """Gets the account_type of this Account.


        :return: The account_type of this Account.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this Account.


        :param account_type: The account_type of this Account.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def iban(self) -> str:
        """Gets the iban of this Account.


        :return: The iban of this Account.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban: str):
        """Sets the iban of this Account.


        :param iban: The iban of this Account.
        :type iban: str
        """

        self._iban = iban

    @property
    def balance(self) -> float:
        """Gets the balance of this Account.


        :return: The balance of this Account.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance: float):
        """Sets the balance of this Account.


        :param balance: The balance of this Account.
        :type balance: float
        """
        if balance is not None and balance < 0:  # noqa: E501
            raise ValueError("Invalid value for `balance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._balance = balance

    @property
    def transactions(self) -> List[Transaction]:
        """Gets the transactions of this Account.


        :return: The transactions of this Account.
        :rtype: List[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions: List[Transaction]):
        """Sets the transactions of this Account.


        :param transactions: The transactions of this Account.
        :type transactions: List[Transaction]
        """

        self._transactions = transactions
