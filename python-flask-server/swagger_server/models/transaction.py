# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account import Account  # noqa: F401,E501
from swagger_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, _from: Account=None, to: str=None, amount: float=None, datetime: datetime=None):  # noqa: E501
        """Transaction - a model defined in Swagger

        :param _from: The _from of this Transaction.  # noqa: E501
        :type _from: Account
        :param to: The to of this Transaction.  # noqa: E501
        :type to: str
        :param amount: The amount of this Transaction.  # noqa: E501
        :type amount: float
        :param datetime: The datetime of this Transaction.  # noqa: E501
        :type datetime: datetime
        """
        self.swagger_types = {
            '_from': Account,
            'to': str,
            'amount': float,
            'datetime': datetime
        }

        self.attribute_map = {
            '_from': 'from',
            'to': 'to',
            'amount': 'amount',
            'datetime': 'datetime'
        }

        self.__from = _from
        self._to = to
        self._amount = amount
        self._datetime = datetime

    @classmethod
    def from_dict(cls, dikt) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self) -> Account:
        """Gets the _from of this Transaction.


        :return: The _from of this Transaction.
        :rtype: Account
        """
        return self.__from

    @_from.setter
    def _from(self, _from: Account):
        """Sets the _from of this Transaction.


        :param _from: The _from of this Transaction.
        :type _from: Account
        """

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this Transaction.


        :return: The to of this Transaction.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this Transaction.


        :param to: The to of this Transaction.
        :type to: str
        """

        self._to = to

    @property
    def amount(self) -> float:
        """Gets the amount of this Transaction.


        :return: The amount of this Transaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.
        :type amount: float
        """
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def datetime(self) -> datetime:
        """Gets the datetime of this Transaction.


        :return: The datetime of this Transaction.
        :rtype: datetime
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime: datetime):
        """Sets the datetime of this Transaction.


        :param datetime: The datetime of this Transaction.
        :type datetime: datetime
        """

        self._datetime = datetime
