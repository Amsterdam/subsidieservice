# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.master_account_base import MasterAccountBase  # noqa: F401,E501
from swagger_server.models.subsidy_base import SubsidyBase  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class MasterAccount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, account_type: str=None, iban: str=None, balance: float=0.0, subsidies: List[SubsidyBase]=None, viewers: List[User]=None, admins: List[User]=None):  # noqa: E501
        """MasterAccount - a model defined in Swagger

        :param name: The name of this MasterAccount.  # noqa: E501
        :type name: str
        :param account_type: The account_type of this MasterAccount.  # noqa: E501
        :type account_type: str
        :param iban: The iban of this MasterAccount.  # noqa: E501
        :type iban: str
        :param balance: The balance of this MasterAccount.  # noqa: E501
        :type balance: float
        :param subsidies: The subsidies of this MasterAccount.  # noqa: E501
        :type subsidies: List[SubsidyBase]
        :param viewers: The viewers of this MasterAccount.  # noqa: E501
        :type viewers: List[User]
        :param admins: The admins of this MasterAccount.  # noqa: E501
        :type admins: List[User]
        """
        self.swagger_types = {
            'name': str,
            'account_type': str,
            'iban': str,
            'balance': float,
            'subsidies': List[SubsidyBase],
            'viewers': List[User],
            'admins': List[User]
        }

        self.attribute_map = {
            'name': 'name',
            'account_type': 'accountType',
            'iban': 'iban',
            'balance': 'balance',
            'subsidies': 'subsidies',
            'viewers': 'viewers',
            'admins': 'admins'
        }

        self._name = name
        self._account_type = account_type
        self._iban = iban
        self._balance = balance
        self._subsidies = subsidies
        self._viewers = viewers
        self._admins = admins

    @classmethod
    def from_dict(cls, dikt) -> 'MasterAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The master-account of this MasterAccount.  # noqa: E501
        :rtype: MasterAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this MasterAccount.


        :return: The name of this MasterAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MasterAccount.


        :param name: The name of this MasterAccount.
        :type name: str
        """

        self._name = name

    @property
    def account_type(self) -> str:
        """Gets the account_type of this MasterAccount.


        :return: The account_type of this MasterAccount.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this MasterAccount.


        :param account_type: The account_type of this MasterAccount.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def iban(self) -> str:
        """Gets the iban of this MasterAccount.


        :return: The iban of this MasterAccount.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban: str):
        """Sets the iban of this MasterAccount.


        :param iban: The iban of this MasterAccount.
        :type iban: str
        """

        self._iban = iban

    @property
    def balance(self) -> float:
        """Gets the balance of this MasterAccount.


        :return: The balance of this MasterAccount.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance: float):
        """Sets the balance of this MasterAccount.


        :param balance: The balance of this MasterAccount.
        :type balance: float
        """

        self._balance = balance

    @property
    def subsidies(self) -> List[SubsidyBase]:
        """Gets the subsidies of this MasterAccount.


        :return: The subsidies of this MasterAccount.
        :rtype: List[SubsidyBase]
        """
        return self._subsidies

    @subsidies.setter
    def subsidies(self, subsidies: List[SubsidyBase]):
        """Sets the subsidies of this MasterAccount.


        :param subsidies: The subsidies of this MasterAccount.
        :type subsidies: List[SubsidyBase]
        """

        self._subsidies = subsidies

    @property
    def viewers(self) -> List[User]:
        """Gets the viewers of this MasterAccount.


        :return: The viewers of this MasterAccount.
        :rtype: List[User]
        """
        return self._viewers

    @viewers.setter
    def viewers(self, viewers: List[User]):
        """Sets the viewers of this MasterAccount.


        :param viewers: The viewers of this MasterAccount.
        :type viewers: List[User]
        """

        self._viewers = viewers

    @property
    def admins(self) -> List[User]:
        """Gets the admins of this MasterAccount.


        :return: The admins of this MasterAccount.
        :rtype: List[User]
        """
        return self._admins

    @admins.setter
    def admins(self, admins: List[User]):
        """Sets the admins of this MasterAccount.


        :param admins: The admins of this MasterAccount.
        :type admins: List[User]
        """

        self._admins = admins
