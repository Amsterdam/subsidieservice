# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account import Account  # noqa: F401,E501
from swagger_server import util


class CitizenAccountBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, account_type: str=None, iban: str=None):  # noqa: E501
        """CitizenAccountBase - a model defined in Swagger

        :param name: The name of this CitizenAccountBase.  # noqa: E501
        :type name: str
        :param account_type: The account_type of this CitizenAccountBase.  # noqa: E501
        :type account_type: str
        :param iban: The iban of this CitizenAccountBase.  # noqa: E501
        :type iban: str
        """
        self.swagger_types = {
            'name': str,
            'account_type': str,
            'iban': str
        }

        self.attribute_map = {
            'name': 'name',
            'account_type': 'account_type',
            'iban': 'iban'
        }

        self._name = name
        self._account_type = account_type
        self._iban = iban

    @classmethod
    def from_dict(cls, dikt) -> 'CitizenAccountBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The citizen-account-base of this CitizenAccountBase.  # noqa: E501
        :rtype: CitizenAccountBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CitizenAccountBase.


        :return: The name of this CitizenAccountBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CitizenAccountBase.


        :param name: The name of this CitizenAccountBase.
        :type name: str
        """

        self._name = name

    @property
    def account_type(self) -> str:
        """Gets the account_type of this CitizenAccountBase.


        :return: The account_type of this CitizenAccountBase.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type: str):
        """Sets the account_type of this CitizenAccountBase.


        :param account_type: The account_type of this CitizenAccountBase.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def iban(self) -> str:
        """Gets the iban of this CitizenAccountBase.


        :return: The iban of this CitizenAccountBase.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban: str):
        """Sets the iban of this CitizenAccountBase.


        :param iban: The iban of this CitizenAccountBase.
        :type iban: str
        """

        self._iban = iban
