# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_base import AccountBase  # noqa: F401,E501
from swagger_server import util


class MasterAccountBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, iban: str=None, balance: float=None, last_updated: str=None, id: str=None):  # noqa: E501
        """MasterAccountBase - a model defined in Swagger

        :param name: The name of this MasterAccountBase.  # noqa: E501
        :type name: str
        :param description: The description of this MasterAccountBase.  # noqa: E501
        :type description: str
        :param iban: The iban of this MasterAccountBase.  # noqa: E501
        :type iban: str
        :param balance: The balance of this MasterAccountBase.  # noqa: E501
        :type balance: float
        :param last_updated: The last_updated of this MasterAccountBase.  # noqa: E501
        :type last_updated: str
        :param id: The id of this MasterAccountBase.  # noqa: E501
        :type id: str
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'iban': str,
            'balance': float,
            'last_updated': str,
            'id': str
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'iban': 'iban',
            'balance': 'balance',
            'last_updated': 'last_updated',
            'id': 'id'
        }

        self._name = name
        self._description = description
        self._iban = iban
        self._balance = balance
        self._last_updated = last_updated
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'MasterAccountBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The master-account-base of this MasterAccountBase.  # noqa: E501
        :rtype: MasterAccountBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this MasterAccountBase.

        The name of the account holder  # noqa: E501

        :return: The name of this MasterAccountBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MasterAccountBase.

        The name of the account holder  # noqa: E501

        :param name: The name of this MasterAccountBase.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this MasterAccountBase.


        :return: The description of this MasterAccountBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this MasterAccountBase.


        :param description: The description of this MasterAccountBase.
        :type description: str
        """

        self._description = description

    @property
    def iban(self) -> str:
        """Gets the iban of this MasterAccountBase.


        :return: The iban of this MasterAccountBase.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban: str):
        """Sets the iban of this MasterAccountBase.


        :param iban: The iban of this MasterAccountBase.
        :type iban: str
        """

        self._iban = iban

    @property
    def balance(self) -> float:
        """Gets the balance of this MasterAccountBase.


        :return: The balance of this MasterAccountBase.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance: float):
        """Sets the balance of this MasterAccountBase.


        :param balance: The balance of this MasterAccountBase.
        :type balance: float
        """

        self._balance = balance

    @property
    def last_updated(self) -> str:
        """Gets the last_updated of this MasterAccountBase.

        Time of last refresh in the database  # noqa: E501

        :return: The last_updated of this MasterAccountBase.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: str):
        """Sets the last_updated of this MasterAccountBase.

        Time of last refresh in the database  # noqa: E501

        :param last_updated: The last_updated of this MasterAccountBase.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def id(self) -> str:
        """Gets the id of this MasterAccountBase.

        The database ID (for use with `GET`)  # noqa: E501

        :return: The id of this MasterAccountBase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MasterAccountBase.

        The database ID (for use with `GET`)  # noqa: E501

        :param id: The id of this MasterAccountBase.
        :type id: str
        """

        self._id = id
