# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AccountBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, iban: str=None, balance: float=None):  # noqa: E501
        """AccountBase - a model defined in Swagger

        :param name: The name of this AccountBase.  # noqa: E501
        :type name: str
        :param description: The description of this AccountBase.  # noqa: E501
        :type description: str
        :param iban: The iban of this AccountBase.  # noqa: E501
        :type iban: str
        :param balance: The balance of this AccountBase.  # noqa: E501
        :type balance: float
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'iban': str,
            'balance': float
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'iban': 'iban',
            'balance': 'balance'
        }

        self._name = name
        self._description = description
        self._iban = iban
        self._balance = balance

    @classmethod
    def from_dict(cls, dikt) -> 'AccountBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The account-base of this AccountBase.  # noqa: E501
        :rtype: AccountBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this AccountBase.


        :return: The name of this AccountBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AccountBase.


        :param name: The name of this AccountBase.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this AccountBase.


        :return: The description of this AccountBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this AccountBase.


        :param description: The description of this AccountBase.
        :type description: str
        """

        self._description = description

    @property
    def iban(self) -> str:
        """Gets the iban of this AccountBase.


        :return: The iban of this AccountBase.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban: str):
        """Sets the iban of this AccountBase.


        :param iban: The iban of this AccountBase.
        :type iban: str
        """

        self._iban = iban

    @property
    def balance(self) -> float:
        """Gets the balance of this AccountBase.


        :return: The balance of this AccountBase.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance: float):
        """Sets the balance of this AccountBase.


        :param balance: The balance of this AccountBase.
        :type balance: float
        """

        self._balance = balance
