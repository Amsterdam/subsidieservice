# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.citizen_base import CitizenBase  # noqa: F401,E501
from swagger_server.models.master_account_base import MasterAccountBase  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class SubsidyBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, master: MasterAccountBase=None, recipient: CitizenBase=None, creator: User=None, approver1: User=None, approver2: User=None, approve_date1: datetime=None, approve_date2: datetime=None, frequency: str=None, amount: float=None, expiry: datetime=None):  # noqa: E501
        """SubsidyBase - a model defined in Swagger

        :param id: The id of this SubsidyBase.  # noqa: E501
        :type id: str
        :param name: The name of this SubsidyBase.  # noqa: E501
        :type name: str
        :param master: The master of this SubsidyBase.  # noqa: E501
        :type master: MasterAccountBase
        :param recipient: The recipient of this SubsidyBase.  # noqa: E501
        :type recipient: CitizenBase
        :param creator: The creator of this SubsidyBase.  # noqa: E501
        :type creator: User
        :param approver1: The approver1 of this SubsidyBase.  # noqa: E501
        :type approver1: User
        :param approver2: The approver2 of this SubsidyBase.  # noqa: E501
        :type approver2: User
        :param approve_date1: The approve_date1 of this SubsidyBase.  # noqa: E501
        :type approve_date1: datetime
        :param approve_date2: The approve_date2 of this SubsidyBase.  # noqa: E501
        :type approve_date2: datetime
        :param frequency: The frequency of this SubsidyBase.  # noqa: E501
        :type frequency: str
        :param amount: The amount of this SubsidyBase.  # noqa: E501
        :type amount: float
        :param expiry: The expiry of this SubsidyBase.  # noqa: E501
        :type expiry: datetime
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'master': MasterAccountBase,
            'recipient': CitizenBase,
            'creator': User,
            'approver1': User,
            'approver2': User,
            'approve_date1': datetime,
            'approve_date2': datetime,
            'frequency': str,
            'amount': float,
            'expiry': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'master': 'master',
            'recipient': 'recipient',
            'creator': 'creator',
            'approver1': 'approver1',
            'approver2': 'approver2',
            'approve_date1': 'approve_date1',
            'approve_date2': 'approve_date2',
            'frequency': 'frequency',
            'amount': 'amount',
            'expiry': 'expiry'
        }

        self._id = id
        self._name = name
        self._master = master
        self._recipient = recipient
        self._creator = creator
        self._approver1 = approver1
        self._approver2 = approver2
        self._approve_date1 = approve_date1
        self._approve_date2 = approve_date2
        self._frequency = frequency
        self._amount = amount
        self._expiry = expiry

    @classmethod
    def from_dict(cls, dikt) -> 'SubsidyBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The subsidy-base of this SubsidyBase.  # noqa: E501
        :rtype: SubsidyBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this SubsidyBase.


        :return: The id of this SubsidyBase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SubsidyBase.


        :param id: The id of this SubsidyBase.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this SubsidyBase.


        :return: The name of this SubsidyBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SubsidyBase.


        :param name: The name of this SubsidyBase.
        :type name: str
        """

        self._name = name

    @property
    def master(self) -> MasterAccountBase:
        """Gets the master of this SubsidyBase.


        :return: The master of this SubsidyBase.
        :rtype: MasterAccountBase
        """
        return self._master

    @master.setter
    def master(self, master: MasterAccountBase):
        """Sets the master of this SubsidyBase.


        :param master: The master of this SubsidyBase.
        :type master: MasterAccountBase
        """

        self._master = master

    @property
    def recipient(self) -> CitizenBase:
        """Gets the recipient of this SubsidyBase.


        :return: The recipient of this SubsidyBase.
        :rtype: CitizenBase
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient: CitizenBase):
        """Sets the recipient of this SubsidyBase.


        :param recipient: The recipient of this SubsidyBase.
        :type recipient: CitizenBase
        """

        self._recipient = recipient

    @property
    def creator(self) -> User:
        """Gets the creator of this SubsidyBase.


        :return: The creator of this SubsidyBase.
        :rtype: User
        """
        return self._creator

    @creator.setter
    def creator(self, creator: User):
        """Sets the creator of this SubsidyBase.


        :param creator: The creator of this SubsidyBase.
        :type creator: User
        """

        self._creator = creator

    @property
    def approver1(self) -> User:
        """Gets the approver1 of this SubsidyBase.


        :return: The approver1 of this SubsidyBase.
        :rtype: User
        """
        return self._approver1

    @approver1.setter
    def approver1(self, approver1: User):
        """Sets the approver1 of this SubsidyBase.


        :param approver1: The approver1 of this SubsidyBase.
        :type approver1: User
        """

        self._approver1 = approver1

    @property
    def approver2(self) -> User:
        """Gets the approver2 of this SubsidyBase.


        :return: The approver2 of this SubsidyBase.
        :rtype: User
        """
        return self._approver2

    @approver2.setter
    def approver2(self, approver2: User):
        """Sets the approver2 of this SubsidyBase.


        :param approver2: The approver2 of this SubsidyBase.
        :type approver2: User
        """

        self._approver2 = approver2

    @property
    def approve_date1(self) -> datetime:
        """Gets the approve_date1 of this SubsidyBase.


        :return: The approve_date1 of this SubsidyBase.
        :rtype: datetime
        """
        return self._approve_date1

    @approve_date1.setter
    def approve_date1(self, approve_date1: datetime):
        """Sets the approve_date1 of this SubsidyBase.


        :param approve_date1: The approve_date1 of this SubsidyBase.
        :type approve_date1: datetime
        """

        self._approve_date1 = approve_date1

    @property
    def approve_date2(self) -> datetime:
        """Gets the approve_date2 of this SubsidyBase.


        :return: The approve_date2 of this SubsidyBase.
        :rtype: datetime
        """
        return self._approve_date2

    @approve_date2.setter
    def approve_date2(self, approve_date2: datetime):
        """Sets the approve_date2 of this SubsidyBase.


        :param approve_date2: The approve_date2 of this SubsidyBase.
        :type approve_date2: datetime
        """

        self._approve_date2 = approve_date2

    @property
    def frequency(self) -> str:
        """Gets the frequency of this SubsidyBase.


        :return: The frequency of this SubsidyBase.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: str):
        """Sets the frequency of this SubsidyBase.


        :param frequency: The frequency of this SubsidyBase.
        :type frequency: str
        """
        allowed_values = ["daily", "weekly", "bi-weekly", "monthly", "yearly"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def amount(self) -> float:
        """Gets the amount of this SubsidyBase.


        :return: The amount of this SubsidyBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this SubsidyBase.


        :param amount: The amount of this SubsidyBase.
        :type amount: float
        """
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def expiry(self) -> datetime:
        """Gets the expiry of this SubsidyBase.


        :return: The expiry of this SubsidyBase.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry: datetime):
        """Sets the expiry of this SubsidyBase.


        :param expiry: The expiry of this SubsidyBase.
        :type expiry: datetime
        """

        self._expiry = expiry
