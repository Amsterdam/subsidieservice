# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.account_base import AccountBase  # noqa: F401,E501
from swagger_server.models.citizen_base import CitizenBase  # noqa: F401,E501
from swagger_server.models.master_account_base import MasterAccountBase  # noqa: F401,E501
from swagger_server import util


class SubsidyBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, master: MasterAccountBase=None, recipient: CitizenBase=None, account: AccountBase=None, frequency: str=None, amount: float=None, startdate: date=None, enddate: date=None, comment: str=None):  # noqa: E501
        """SubsidyBase - a model defined in Swagger

        :param id: The id of this SubsidyBase.  # noqa: E501
        :type id: str
        :param name: The name of this SubsidyBase.  # noqa: E501
        :type name: str
        :param master: The master of this SubsidyBase.  # noqa: E501
        :type master: MasterAccountBase
        :param recipient: The recipient of this SubsidyBase.  # noqa: E501
        :type recipient: CitizenBase
        :param account: The account of this SubsidyBase.  # noqa: E501
        :type account: AccountBase
        :param frequency: The frequency of this SubsidyBase.  # noqa: E501
        :type frequency: str
        :param amount: The amount of this SubsidyBase.  # noqa: E501
        :type amount: float
        :param startdate: The startdate of this SubsidyBase.  # noqa: E501
        :type startdate: date
        :param enddate: The enddate of this SubsidyBase.  # noqa: E501
        :type enddate: date
        :param comment: The comment of this SubsidyBase.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'master': MasterAccountBase,
            'recipient': CitizenBase,
            'account': AccountBase,
            'frequency': str,
            'amount': float,
            'startdate': date,
            'enddate': date,
            'comment': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'master': 'master',
            'recipient': 'recipient',
            'account': 'account',
            'frequency': 'frequency',
            'amount': 'amount',
            'startdate': 'startdate',
            'enddate': 'enddate',
            'comment': 'comment'
        }

        self._id = id
        self._name = name
        self._master = master
        self._recipient = recipient
        self._account = account
        self._frequency = frequency
        self._amount = amount
        self._startdate = startdate
        self._enddate = enddate
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'SubsidyBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The subsidy-base of this SubsidyBase.  # noqa: E501
        :rtype: SubsidyBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this SubsidyBase.


        :return: The id of this SubsidyBase.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SubsidyBase.


        :param id: The id of this SubsidyBase.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this SubsidyBase.


        :return: The name of this SubsidyBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SubsidyBase.


        :param name: The name of this SubsidyBase.
        :type name: str
        """

        self._name = name

    @property
    def master(self) -> MasterAccountBase:
        """Gets the master of this SubsidyBase.


        :return: The master of this SubsidyBase.
        :rtype: MasterAccountBase
        """
        return self._master

    @master.setter
    def master(self, master: MasterAccountBase):
        """Sets the master of this SubsidyBase.


        :param master: The master of this SubsidyBase.
        :type master: MasterAccountBase
        """

        self._master = master

    @property
    def recipient(self) -> CitizenBase:
        """Gets the recipient of this SubsidyBase.


        :return: The recipient of this SubsidyBase.
        :rtype: CitizenBase
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient: CitizenBase):
        """Sets the recipient of this SubsidyBase.


        :param recipient: The recipient of this SubsidyBase.
        :type recipient: CitizenBase
        """

        self._recipient = recipient

    @property
    def account(self) -> AccountBase:
        """Gets the account of this SubsidyBase.


        :return: The account of this SubsidyBase.
        :rtype: AccountBase
        """
        return self._account

    @account.setter
    def account(self, account: AccountBase):
        """Sets the account of this SubsidyBase.


        :param account: The account of this SubsidyBase.
        :type account: AccountBase
        """

        self._account = account

    @property
    def frequency(self) -> str:
        """Gets the frequency of this SubsidyBase.


        :return: The frequency of this SubsidyBase.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency: str):
        """Sets the frequency of this SubsidyBase.


        :param frequency: The frequency of this SubsidyBase.
        :type frequency: str
        """

        self._frequency = frequency

    @property
    def amount(self) -> float:
        """Gets the amount of this SubsidyBase.


        :return: The amount of this SubsidyBase.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this SubsidyBase.


        :param amount: The amount of this SubsidyBase.
        :type amount: float
        """
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def startdate(self) -> date:
        """Gets the startdate of this SubsidyBase.


        :return: The startdate of this SubsidyBase.
        :rtype: date
        """
        return self._startdate

    @startdate.setter
    def startdate(self, startdate: date):
        """Sets the startdate of this SubsidyBase.


        :param startdate: The startdate of this SubsidyBase.
        :type startdate: date
        """

        self._startdate = startdate

    @property
    def enddate(self) -> date:
        """Gets the enddate of this SubsidyBase.


        :return: The enddate of this SubsidyBase.
        :rtype: date
        """
        return self._enddate

    @enddate.setter
    def enddate(self, enddate: date):
        """Sets the enddate of this SubsidyBase.


        :param enddate: The enddate of this SubsidyBase.
        :type enddate: date
        """

        self._enddate = enddate

    @property
    def comment(self) -> str:
        """Gets the comment of this SubsidyBase.


        :return: The comment of this SubsidyBase.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this SubsidyBase.


        :param comment: The comment of this SubsidyBase.
        :type comment: str
        """

        self._comment = comment
